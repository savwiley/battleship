{"version":3,"sources":["facts/ships.js","facts/checkCoord.js","facts/gameboard.js","components/Grid.js","components/Header.js","components/InfoBoard.js","App.js","components/PlayerGrid.js","facts/aiTurn.js","components/AIGrid.js","Game.js","Routes.js","index.js"],"names":["Ships","player","ship","mark","shipArr","shipList","filter","e","name","enemyShipList","messenger","document","querySelector","hit","indexOf","splice","length","textContent","map","square","Array","from","getElementsByClassName","x","classList","toggle","humanWin","i","compWin","checkCoord","coord","check","plTakenCoords","aiTakenCoords","push","coords","enemyList","gameboard","action","xArr","coArr","split","shipMenuList","querySelectorAll","range","numb","value","attIndex","coordArr","checkArr","limit","yCoord","style","outline","index","findIndex","xCoord","Grid","props","place","alpha","useEffect","grid","playBtn","display","addEventListener","current","id","a","background","color","alert","changeSquare","className","Header","href","InfoBoard","App","useRef","dirBtn","shipContList","nameShip","to","PlayerGrid","takenCoords","aiTurn","numbX","Math","floor","random","error","RangeError","getCoord","AIGrid","attackSquare","move","Game","getDirection","getShip","enShipList","Routes","basename","exact","path","render","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.af2a034d.chunk.js","sourcesContent":["import shipList from \"../data/shipList.json\";\nimport enemyShipList from \"../data/enemyShipList.json\";\n\n//this file changes the ship objects in the data folder\n\nconst Ships = (player, ship, mark) => {\n  //grabs the ship\n  let shipArr;\n  if (player === \"human\") {\n    shipArr = shipList.filter((e) => e.name === ship);\n  } else if (player === \"computer\") {\n    shipArr = enemyShipList.filter((e) => e.name === ship);\n  }\n\n  //grabs the messenger\n  const messenger = document.querySelector(\".messenger\");\n\n  //determines which target was hit and removes it\n  const hit = shipArr[0][\"targets\"].indexOf(mark + 1);\n  shipArr[0][\"targets\"].splice(hit, 1);\n\n  //sinks ships\n  if (shipArr[0][\"targets\"].length === 0) {\n    shipArr[0][\"sunk\"] = true;\n    if (player === \"human\") {\n      messenger.textContent = `Your ${shipArr[0][\"name\"]} was sunk!`;\n    } else if (player === \"computer\") {\n      messenger.textContent = `You sunk their ${shipArr[0][\"name\"]}!`;\n    }\n    shipArr[0][\"coords\"].map((e) => {\n      //grabs square dom of coord from each board\n      let square;\n      let grid;\n      if (player === \"human\") {\n        grid = Array.from(document.getElementsByClassName(\"grid playerGrid\"));\n        grid.map((x) => {\n          return (square = x.querySelector(`#${e}`));\n        });\n      } else if (player === \"computer\") {\n        grid = Array.from(document.getElementsByClassName(\"grid aiGrid\"));\n        grid.map((x) => {\n          return (square = x.querySelector(`#${e}`));\n        });\n      }\n      return square.classList.toggle(\"sunk\");\n    });\n  }\n\n  //determine if there's a winner yet\n  //remember that player is by board, not who's taking the move\n  if (player === \"human\") {\n    let humanWin = 0;\n    for (let i = 0; i < shipList.length; i++) {\n      if (shipList[i][\"sunk\"] === false) {\n        i = shipList.length;\n        humanWin = 0;\n      } else {\n        humanWin++;\n      }\n    }\n    if (humanWin !== 0) {\n      messenger.textContent = \"You lost!\";\n    }\n  }\n  if (player === \"computer\") {\n    let compWin = 0;\n    for (let i = 0; i < enemyShipList.length; i++) {\n      if (enemyShipList[i][\"sunk\"] === false) {\n        i = enemyShipList.length;\n        compWin = 0;\n      } else {\n        compWin++;\n      }\n    }\n    if (compWin !== 0) {\n      messenger.textContent = \"You won!\";\n    }\n  }\n};\n\nexport default Ships;\n","import shipList from \"../data/shipList.json\";\nimport enemyList from \"../data/enemyShipList.json\";\n\n//this file checks to see if any squares are taken by ships\n\nconst checkCoord = (player, coord) => {\n  let check = false;\n  let plTakenCoords = [];\n  let aiTakenCoords = [];\n\n  //checks if the square is a ship\n  if (player === \"human\") {\n    shipList.map((e) => {\n      for (let i = 0; i < e.length; i++) {\n        plTakenCoords.push(e.coords[i]);\n      }\n      return plTakenCoords;\n    });\n    plTakenCoords.map((e) => (e === coord ? (check = true) : null));\n  } else if (player === \"computer\") {\n    enemyList.map((e) => {\n      for (let i = 0; i < e.length; i++) {\n        aiTakenCoords.push(e.coords[i]);\n      }\n      return aiTakenCoords;\n    });\n    aiTakenCoords.map((e) => (e === coord ? (check = true) : null));\n  }\n\n  return check;\n  //check returns false if coord isn't taken up or true if it is\n};\n\nexport default checkCoord;\n","import Ships from \"./ships.js\";\nimport shipList from \"../data/shipList.json\";\nimport enemyShipList from \"../data/enemyShipList.json\";\nimport checkCoord from \"./checkCoord.js\";\n\n//this file processes clicks, deciphers action, and sends commands accordingly\n\nconst gameboard = (player, ship, action, coord) => {\n  //NOTE: player is defined by which board is in play, not which player is taking a turn. If \"human\" is clicking on the \"computer\" board, then player = \"computer.\"\n\n  //grab the ship\n  let shipArr;\n  if (player === \"human\") {\n    shipArr = shipList.filter((e) => e.name === ship);\n  } else if (player === \"computer\") {\n    shipArr = enemyShipList.filter((e) => e.name === ship);\n  }\n  //array of x coords\n  const xArr = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n  //splitting coord into array for placement\n  const coArr = coord.split(\"\");\n  //grabs square dom of coord from each board\n  let square;\n  let grid;\n  if (player === \"human\") {\n    grid = Array.from(document.getElementsByClassName(\"grid playerGrid\"));\n    grid.map((e) => {\n      return (square = e.querySelector(`#${coord}`));\n    });\n  } else if (player === \"computer\") {\n    grid = Array.from(document.getElementsByClassName(\"grid aiGrid\"));\n    grid.map((e) => {\n      return (square = e.querySelector(`#${coord}`));\n    });\n  }\n\n  //grabs the placement menu items\n  const shipMenuList = Array.from(document.querySelectorAll(\".ship\"));\n\n  //grabs the messenger\n  const messenger = document.querySelector(\".messenger\");\n\n  //prevents ships from leaving the grid\n  function range(numb) {\n    return numb < 0 ? false : numb > 9 ? false : true;\n  }\n\n  if (action === \"missed\") {\n    if (\n      square.classList.value === \"square missed\" ||\n      square.classList.value === \"square placed attacked\" ||\n      square.classList.value === \"square placed attacked sunk\"\n    ) {\n      messenger.textContent = \"Already struck here!\";\n    } else if (square) {\n      square.classList.toggle(\"missed\");\n    }\n  } else if (action === \"attack\") {\n    const attIndex = shipArr[0][\"coords\"].indexOf(coord);\n    if (square) {\n      square.classList.toggle(\"attacked\");\n      Ships(player, ship, attIndex);\n    }\n  } else if (action === \"placeV\" || action === \"placeH\") {\n    //check if ship has already been placed\n    if (shipArr[0][\"coords\"].length !== shipArr[0][\"length\"]) {\n      //stores all coords\n      let coordArr = [];\n      //stores booleans\n      let checkArr = [];\n      //variable\n      let numb = 0;\n      //if placement vertical\n      if (action === \"placeV\") {\n        //loops through each coord to save\n        for (let i = 0; i < shipArr[0][\"length\"]; i++) {\n          const limit = range(coArr[1]);\n          if (limit === true) {\n            const yCoord = coArr[0] + coArr[1];\n            coordArr.push(yCoord);\n            coArr[1]++;\n          } else if (limit === false && player === \"human\") {\n            messenger.textContent = \"Ships can't leave grid!\";\n            coordArr = [];\n            i = shipArr[0][\"length\"];\n            shipMenuList.map((e) => {\n              if (e.textContent === shipArr[0][\"name\"]) {\n                e.style.outline = \"1px solid #fff\";\n              }\n              return e;\n            });\n          } else if (limit === false && player === \"computer\") {\n            coordArr = [];\n            i = shipArr[0][\"length\"];\n          }\n        }\n        //if placement horizontal\n      } else if (action === \"placeH\") {\n        //finds index of letter\n        let index = xArr.findIndex((e) => e === coArr[0]);\n        //loops through each coord to save\n        for (let i = 0; i < shipArr[0][\"length\"]; i++) {\n          const limit = range(index);\n          if (limit === true) {\n            const xCoord = xArr[index] + coArr[1];\n            coordArr.push(xCoord);\n            index++;\n          } else if (limit === false && player === \"human\") {\n            messenger.textContent = \"Ships can't leave grid!\";\n            coordArr = [];\n            i = shipArr[0][\"length\"];\n            shipMenuList.map((e) => {\n              if (e.textContent === shipArr[0][\"name\"]) {\n                e.style.outline = \"1px solid #fff\";\n              }\n              return e;\n            });\n          } else if (limit === false && player === \"computer\") {\n            coordArr = [];\n            i = shipArr[0][\"length\"];\n          }\n        }\n      }\n      //checks all coords and saves booleans\n      coordArr.map((e) => {\n        if (player === \"human\") {\n          return checkArr.push(checkCoord(\"human\", e));\n        } else {\n          return checkArr.push(checkCoord(\"computer\", e));\n        }\n      });\n      //check all booleans to find if any are true\n      checkArr.map((e) => (e === true ? numb++ : numb));\n      //if all booleans are false, place ship\n      if (numb === 0) {\n        coordArr.map((e) => {\n          return shipArr[0][\"coords\"].push(e);\n        });\n        //if any booleans are true, send alert\n      } else if (numb !== 0 && player === \"human\") {\n        messenger.textContent = \"Ships can't overlap!\";\n        shipMenuList.map((e) => {\n          if (e.textContent === shipArr[0][\"name\"]) {\n            return (e.style.outline = \"1px solid #fff\");\n          }\n          return e;\n        });\n      }\n      //visually take squares for player only\n      shipArr[0][\"coords\"].map((e) => {\n        const squares = document.querySelectorAll(`#${e}`);\n        return squares[0].classList.toggle(\"placed\");\n      });\n    }\n  }\n};\n\nexport default gameboard;\n","import React, { useEffect } from \"react\";\nimport gameboard from \"../facts/gameboard.js\";\nimport shipList from \"../data/shipList.json\";\n\nconst Grid = (props) => {\n  const { place, ship } = props;\n\n  const alpha = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n  let numb = 0;\n\n  useEffect(() => {\n    const square = Array.from(document.querySelectorAll(\".square\"));\n    const grid = document.querySelector(\".grid\");\n    const shipMenuList = Array.from(document.querySelectorAll(\".ship\"));\n    const playBtn = document.querySelector(\".playBtn\");\n    playBtn.style.display = \"none\";\n\n    const changeSquare = (e) => {\n      if (!ship.current) {\n        alert(\"Please choose a ship!\");\n      } else {\n        gameboard(\"human\", ship.current, place.current, e.id);\n        //only dims ship button after ship is placed\n        //only shows play button after ALL ships are placed\n        //there has got to be a better way to do this\n        shipMenuList.map((e) => {\n          if (e.textContent === ship.current) {\n            shipList.map((a) => {\n              if (e.textContent === a[\"name\"]) {\n                if (a[\"coords\"].length === a[\"length\"]) {\n                  e.style.background = \"#929292\";\n                  e.style.color = \"#616161\";\n                  e.style.outline = \"1px solid #fff\";\n                  numb++;\n                }\n              }\n              return a;\n            });\n          }\n          return e;\n        });\n        if (numb === 5) {\n          playBtn.style.display = \"block\";\n        }\n        ship.current = null;\n      }\n    };\n\n    if (grid && square) {\n      square.map((e) => {\n        return e.addEventListener(\"click\", () => {\n          changeSquare(e);\n        });\n      });\n    }\n  });\n\n  return (\n    <div className=\"grid\">\n      {alpha.map((i) =>\n        alpha.map((e) => (\n          <div\n            className=\"square\"\n            id={e + alpha.indexOf(i)}\n            key={e + alpha.indexOf(i)}\n          ></div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Grid;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      Battleship\n      <a href=\"https://github.com/savwiley/battleship\" className=\"credit\">\n        github\n      </a>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst InfoBoard = () => {\n  return (\n    <div className=\"infoBoard\">\n      <div className=\"messenger\">\n        Place your ships with the menu below! Click on 'Play Game' when the\n        button appears and attack the computer's board. Good luck and have fun!\n      </div>\n    </div>\n  );\n};\n\nexport default InfoBoard;\n","import React, { useRef, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Grid from \"./components/Grid.js\";\nimport Header from \"./components/Header.js\";\nimport InfoBoard from \"./components/InfoBoard.js\";\n\n//this file is for placing ships\n\nfunction App() {\n  const place = useRef(\"placeH\");\n  const ship = useRef();\n\n  //placement direction logic\n  useEffect(() => {\n    const dirBtn = document.querySelector(\".directionBtn\");\n\n    const direction = () => {\n      if (place.current === \"placeH\") {\n        dirBtn.textContent = \"Place Ships Horizontally\";\n        place.current = \"placeV\";\n      } else if (place.current === \"placeV\") {\n        dirBtn.textContent = \"Place Ships Vertically\";\n        place.current = \"placeH\";\n      }\n    };\n\n    if (dirBtn) {\n      dirBtn.addEventListener(\"click\", direction);\n    }\n  });\n\n  //ship selection logic\n  useEffect(() => {\n    const shipContList = Array.from(document.querySelectorAll(\".ship\"));\n\n    const nameShip = (e) => {\n      ship.current = e.textContent;\n    };\n\n    if (shipContList) {\n      shipContList.map((e) => {\n        return e.addEventListener(\"click\", () => {\n          shipContList.map((a) => {\n            a.style.outline = \"1px solid #fff\";\n            return a;\n          });\n          nameShip(e);\n          e.style.outline = \"1px solid #0f0\";\n        });\n      });\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      <Header />\n\n      <InfoBoard />\n\n      <Grid place={place} ship={ship} />\n\n      <div className=\"menu\">\n        <button className=\"directionBtn\">Place Ships Vertically</button>\n\n        <div className=\"shipContainer\">\n          <div className=\"ship\">Carrier</div>\n          <div className=\"ship\">Battleship</div>\n          <div className=\"ship\">Destroyer</div>\n          <div className=\"ship\">Submarine</div>\n          <div className=\"ship\">Patrol Boat</div>\n        </div>\n\n        <Link to=\"/Game\">\n          <div className=\"playBtn\">Play Game!</div>\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n/**\n * https://www.theodinproject.com/paths/full-stack-javascript/courses/javascript/lessons/battleship\n *\n *\n *\n * TODOS\n * -css\n * -license\n * -readme\n * -change alerts to css popups\n * -declare winner\n * -declare sunken ships\n * -check if testing returns are still needed (probs not???)\n * -hide computer's ships in css\n */\n","import React, { useEffect } from \"react\";\nimport shipList from \"../data/shipList.json\";\n\nconst PlayerGrid = () => {\n  const alpha = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n\n  //this logic places player ships on player grid when game starts\n  const takenCoords = [];\n\n  shipList.map((e) => {\n    for (let i = 0; i < e.length; i++) {\n      takenCoords.push(e.coords[i]);\n    }\n    return takenCoords;\n  });\n\n  useEffect(() => {\n    for (let i = 0; i < takenCoords.length; i++) {\n      const square = document.querySelector(`#${takenCoords[i]}`);\n      if (square) {\n        square.classList.toggle(\"placed\");\n      }\n    }\n  });\n\n  return (\n    <div className=\"grid playerGrid\">\n      {alpha.map((i) =>\n        alpha.map((e) => (\n          <div\n            className=\"square\"\n            id={e + alpha.indexOf(i)}\n            key={e + alpha.indexOf(i)}\n          ></div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default PlayerGrid;\n","import shipList from \"../data/shipList.json\";\nimport gameboard from \"./gameboard.js\";\n\nconst aiTurn = () => {\n  const alpha = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n\n  //gets a random coord\n  const getCoord = () => {\n    try {\n      const numbX = Math.floor(Math.random() * 10);\n      const letterX = alpha[numbX];\n      const numbY = Math.floor(Math.random() * 10);\n      return letterX + numbY;\n    } catch (error) {\n      if (error instanceof RangeError) {\n        alert(\"Game Over\");\n      }\n    }\n  };\n\n  //selects square only from playerGrid\n  const grid = Array.from(document.getElementsByClassName(\"grid playerGrid\"));\n  let square;\n  grid.map((e) => {\n    return (square = e.querySelector(`#${getCoord()}`));\n  });\n\n  //grabs the messenger\n  const messenger = document.querySelector(\".messenger\");\n\n  if (square.className === \"square placed\" || square.className === \"square\") {\n    let ship;\n    let hit = \"missed\";\n    if (square.className === \"square placed\") {\n      hit = \"attack\";\n    }\n    for (let i = 0; i < shipList.length; i++) {\n      shipList[i][\"coords\"].map((x) => {\n        if (x === square.id) {\n          ship = shipList[i][\"name\"];\n        }\n        return ship;\n      });\n    }\n    gameboard(\"human\", ship, hit, square.id);\n    if (hit === \"missed\") {\n      messenger.textContent = `Computer attacks ${square.id}. They missed!`;\n    } else if (hit === \"attack\") {\n      messenger.textContent = `Computer attacks ${square.id}. It's a hit!`;\n    }\n  } else {\n    aiTurn();\n  }\n};\n\nexport default aiTurn;\n","import React, { useEffect } from \"react\";\nimport shipList from \"../data/enemyShipList.json\";\nimport gameboard from \"../facts/gameboard.js\";\nimport aiTurn from \"../facts/aiTurn.js\";\n\nconst AIGrid = () => {\n  const alpha = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n\n  //this logic places computer ships on computer grid when game starts\n  const takenCoords = [];\n\n  shipList.map((e) => {\n    for (let i = 0; i < e.length; i++) {\n      takenCoords.push(e.coords[i]);\n    }\n    return takenCoords;\n  });\n\n  useEffect(() => {\n    for (let i = 0; i < takenCoords.length; i++) {\n      const grid = document.querySelector(\".aiGrid\");\n      if (grid) {\n        const square = grid.querySelector(`#${takenCoords[i]}`);\n        if (square) {\n          square.classList.toggle(\"placed\");\n        }\n      }\n    }\n  });\n\n  //player takes a turn\n  useEffect(() => {\n    //selects squares only on aiGrid\n    const grid = Array.from(document.getElementsByClassName(\"grid aiGrid\"));\n    let square;\n    grid.map((e) => {\n      return (square = Array.from(e.querySelectorAll(\".square\")));\n    });\n\n    const attackSquare = (e, ship, move) => {\n      if (e.className === \"square\" || e.className === \"square placed\") {\n        aiTurn();\n      }\n      gameboard(\"computer\", ship, move, e.id);\n    };\n\n    if (grid && square) {\n      square.map((e) => {\n        return e.addEventListener(\"click\", () => {\n          let compWin = 0;\n          for (let i = 0; i < shipList.length; i++) {\n            if (shipList[i][\"sunk\"] === false) {\n              i = shipList.length;\n              compWin = 0;\n            } else {\n              compWin++;\n            }\n          }\n          if (compWin === 0) {\n            let numb = 0;\n            let hit = \"missed\";\n            if (e.className === \"square placed\") {\n              hit = \"attack\";\n            }\n            for (let i = 0; i < shipList.length; i++) {\n              shipList[i][\"coords\"].map((x) => {\n                if (x === e.id) {\n                  numb = i;\n                }\n                return numb;\n              });\n            }\n            return attackSquare(e, shipList[numb][\"name\"], hit);\n          }\n        });\n      });\n    }\n  });\n\n  return (\n    <div className=\"grid aiGrid\">\n      {alpha.map((i) =>\n        alpha.map((e) => (\n          <div\n            className=\"square\"\n            id={e + alpha.indexOf(i)}\n            key={e + alpha.indexOf(i)}\n          >\n            {e + alpha.indexOf(i)}\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default AIGrid;\n","import React from \"react\";\nimport gameboard from \"./facts/gameboard.js\";\nimport enShipList from \"./data/enemyShipList.json\";\nimport Header from \"./components/Header.js\";\nimport PlayerGrid from \"./components/PlayerGrid.js\";\nimport AIGrid from \"./components/AIGrid.js\";\nimport InfoBoard from \"./components/InfoBoard.js\";\n\n//this file is for actually playing the game\n\nconst Game = () => {\n  const alpha = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n\n  //gets a random coord\n  const getCoord = () => {\n    const numbX = Math.floor(Math.random() * 10);\n    const letterX = alpha[numbX];\n    const numbY = Math.floor(Math.random() * 10);\n    return letterX + numbY;\n  };\n\n  //gets a random direction\n  const getDirection = () => {\n    const numb = Math.floor(Math.random() * 2);\n    if (numb === 0) {\n      return \"placeV\";\n    } else if (numb === 1) {\n      return \"placeH\";\n    }\n  };\n\n  //gets a random, unplaced ship array\n  const getShip = () => {\n    for (let i = 0; i < enShipList.length; i++) {\n      if (enShipList[i][\"coords\"].length !== enShipList[i][\"length\"]) {\n        const shipArr = enShipList[i];\n        i = enShipList.length;\n        return shipArr[\"name\"];\n      }\n    }\n  };\n\n  //AI places ships\n  while (enShipList[4][\"coords\"].length !== 2) {\n    gameboard(\"computer\", getShip(), getDirection(), getCoord());\n  }\n\n  return (\n    <>\n      <Header />\n\n      <InfoBoard />\n\n      <div className=\"names\">\n        <div id=\"playerName\">your board</div>\n        <div id=\"compName\">computer board</div>\n      </div>\n\n      <PlayerGrid />\n\n      <AIGrid />\n    </>\n  );\n};\n\nexport default Game;\n","import React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport App from \"./App.js\";\nimport Game from \"./Game.js\";\n\nconst Routes = () => {\n  return (\n    <HashRouter basename=\"/\">\n      <Switch>\n        <Route exact path=\"/\" render={() => <App />} />\n        <Route exact path=\"/Game\" render={() => <Game />} />\n      </Switch>\n    </HashRouter>\n  );\n};\n\nexport default Routes;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './Routes';\nimport \"./styles/style.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}